import {writeFile}  from "node:fs/promises"
import {rmSync}     from "node:fs"
import {ParsedPath} from "node:path"

import clean from "node-cleanup"

import {order, merge} from "./utils"
import read from "./read"

import type {PackageJson} from "type-fest"
import type {ProcessEnv, Read} from "./types"

const {env, argv}: NodeJS.Process = process
const [command]: string[] = argv[2..]
const commands:  string[] = [
  "add"
  "import"
  "i"
  "install"
  "ln"
  "link"
  "prune"
  "rb"
  "rebuild"
  "rm"
  "remove"
  "unlink"
  "up"
  "update"
  "audit"
  "licenses"
  "ls"
  "list"
  "outdated"
  "root"
]

unless command in commands or env.npm_lifecycle_event?
  const {path, metadata}: Read = await read()

  const pattern: RegExp =  /pre-package[/-]p(lugin|reset)/
  const last: string[] = ["@pre-package/plugin-normalize"]

  const processed: PackageJson = Object.keys metadata.devDependencies ?? {}
    .filter &.match pattern
    .sort order last
    .map require
    .flat()
    .reduce merge, metadata

  if path.ext is ".yaml"
    const json: string = JSON.stringify processed
    await writeFile "package.json", json
  else
    const indent: number = parseInt env.TABSIZE ?? "2"
    const {stringify}  = await import "yaml"
    const yaml: string = stringify processed, {indent}
    try await writeFile "package.yaml", yaml, flag: "wx"

  clean => rmSync "package.json", force: true
